// --------------------------------------------------------------------------------------------------------------------
// <copyright file="CreatePayload.cs" company="Microsoft">
//   Copyright (c) Microsoft Corporation. All rights reserved.
// </copyright>
// <summary>
//   Create a payload by registering it payload document to database.
//   The payload document is any format of document. Its format depends on the feeder and consumer. 
//   i.e. Handoff payload will have Lcg to Language mapping while handback payload will have full mapping.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace Juno.Payload.Service.V1;

using System;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;

using Microsoft;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Enums;
using Microsoft.Extensions.Logging;
using Microsoft.OpenApi.Models;

using Microsoft.Localization.SignProviders;

using FunctionExtensions.DependencyInjection;
using Juno.Payload.Dto;
using Juno.Payload.Service.Extensions;
using Juno.Payload.Service.Metrics;
using Juno.Payload.Service.Model;
using Juno.Payload.Service.Repository;

/// <summary>
/// Function to create a payload document in database with given metadata. It returns new id generated.
/// </summary>
public static class CreatePayload
{
    private const string OpId = nameof(Constants.CreatePayloadV1);
    private const string FnName = Constants.CreatePayloadV1;
    private const string Route = "v1/payloads";

    /// <summary>
    /// HttpTrigger to register a payload document in database.
    /// 
    /// Usage:
    /// create payload skeleton object without data only:  v1/payloads
    /// create payload together with payload data:   v1/payloads?category=withPayloadData=true&{category}&payloadDataType=BlobAttachment
    /// </summary>
    /// <param name="req">Http request.</param>
    /// <param name="log">TraceWriter to trace log.</param>
    /// <returns>New Guid generated by database.</returns>
    [OpenApiOperation(
        operationId: OpId,
        tags: new[] { "Payload" },
        Description = $"{FnName}: Creates a payload",
        Visibility = OpenApiVisibilityType.Important)]
    [OpenApiParameter(Constants.CategoryParamName, In = ParameterLocation.Query, Required = true, Type = typeof(string))]
    [OpenApiParameter(Constants.WithPayloadDataParamName, In = ParameterLocation.Query, Required = true, Type = typeof(bool))]
    [OpenApiParameter(Constants.PayloadDataTypeParamName, In = ParameterLocation.Query, Required = true, Type = typeof(string))]
    [OpenApiRequestBody(
        MediaTypeNames.Application.Json,
        typeof(PayloadDataStorageTypeDto),
        Required = true,
        Description = nameof(PayloadDataStorageTypeDto))]
    [OpenApiResponseWithBody(
        statusCode: HttpStatusCode.OK,
        MediaTypeNames.Application.Json,
        bodyType: typeof(IIdentifiableObject),
        Description = "A payload is successfully created.")]
    [OpenApiResponseWithoutBody(HttpStatusCode.BadRequest, Description = "Required parameters are not specified.")]
    [FunctionName(FnName)]
    public static async Task<IActionResult> RunAsync(
        [HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = Route)] HttpRequest req,
        [Inject] IPayloadRepository payloadRepository,
        [Inject] IPayloadMetricEmitter metricEmitter,
        [Inject] IPayloadAttachmentRepository payloadAttachmentRepository,
        [Inject] ISignProvider signProvider,
        ILogger log)
    {
        using (var timedOperation = metricEmitter.BeginTimedOperation(FnName))
        {
            log.LogInformation($"{FnName}: HTTP trigger to create a payload started at {DateTime.Now.ToUniversalTime()}");

            log.LogInformation($"{FnName}: Creating new payload started at {DateTime.Now.ToUniversalTime()}");

            if (!req.TryGetCategory(FnName, log, out var category, out var badRequestObjectResult))
            {
                return badRequestObjectResult;
            }

            var payload = PayloadWithData.CreateNew(category: category, payloadVersion: PayloadVersion.V1); // initialize with default partition key

            Verify.Operation(
                !string.IsNullOrWhiteSpace(payload.Id) && payload.Id != Guid.Empty.ToString(),
                "Payload id can't be empty after payload object creation");

            var responseContract = new
            {
                payload.Id
            };

            if (req.ContainsWithPayloadData())
            {
                if (!req.TryGetPayloadDataType(FnName, log, out var payloadDataTypeDto, out badRequestObjectResult))
                {
                    return badRequestObjectResult;
                }

                var payloadDataType = payloadDataTypeDto.ToDomain();
                var blobAttachmentReference = new BlobAttachmentReference(BlobAttachmentId.CreateFor(payload), new ContentType(req.ContentType));
                payload.UpdatePayloadInlineMetadataWith(payloadDataType, blobAttachmentReference);

            var dataStream = req.Body;

            try
            {
                var requireSign = req.RequireSign();

                if (requireSign)
                {
                    dataStream = req.VerifySignature(signProvider);
                }
            }
            catch (Exception e)
            {
                var errorMessage = $"Failed to create the payload.";
                log.LogError($"{FnName}: {errorMessage} {e.Message}");

                return new BadRequestObjectResult($"{errorMessage} {e.Message}");
            }

            // fist try to upload attachment and then create payload describing object
            await payloadAttachmentRepository.UploadAttachmentAsync(blobAttachmentReference, dataStream);
            var doc = await payloadRepository.CreateItemAsync(payload);

                if (doc.Id != responseContract.Id.ToString())
                {
                    throw new InvalidOperationException($"Returned document id {doc.Id} was different from requested payload id {responseContract.Id}");
                }

                return new OkObjectResult(responseContract);
            }
            else
            {
                log.LogInformation($"{FnName}: New payload registered with {responseContract.Id}.");
                log.LogInformation($"{FnName}: HTTP trigger to create a payload finished at {DateTime.Now.ToUniversalTime()}");

                var doc = await payloadRepository.CreateItemAsync(payload);

                if (doc.Id != responseContract.Id.ToString())
                {
                    throw new InvalidOperationException($"Returned document id {doc.Id} was different from requested payload id {responseContract.Id}");
                }

                return new OkObjectResult(responseContract);
            }
        }
    }
}
